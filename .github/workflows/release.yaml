name: Release

# Releasesへのファイル追加のために書き込み権限が必要
permissions:
  contents: write

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Release binary
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: dict-to-mozc-x86_64-linux.tar.xz
            asset_name: dict-to-mozc-x86_64-unknown-linux-musl
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            artifact_name: dict-to-mozc-aarch64-linux.tar.xz
            asset_name: dict-to-mozc-aarch64-unknown-linux-musl
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: dict-to-mozc-x86_64-linux.tar.xz
            asset_name: dict-to-mozc-x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: dict-to-mozc-aarch64-linux.tar.xz
            asset_name: dict-to-mozc-aarch64-unknown-linux-gnu
          - os: ubuntu-latest
            target: x86_64-pc-windows-gnu
            artifact_name: dict-to-mozc-x86_64-pc-windows-gnu.zip
            asset_name: dict-to-mozc-x86_64-pc-windows-gnu
          - os: ubuntu-latest
            target: x86_64-apple-darwin
            artifact_name: md2html-x86_64-x86_64-apple-darwin.tar.xz
            asset_name: md2html-x86_64-x86_64-apple-darwin
          - os: ubuntu-latest
            target: aarch64-apple-darwin
            artifact_name: md2html-aarch64-apple-darwin.tar.xz
            asset_name: md2html-aarch64-x86_64-apple-darwin

    runs-on: ${{ matrix.os }}
    env:
      SCCACHE_GHA_ENABLED: "true"
      RUSTC_WRAPPER: "sccache"
      # SCCACHE_RECACHE: 1 # Uncomment this to clear cache, then comment

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: rustup cache
        run: |
          mkdir -p /home/runner/.rustup
          mkdir -p /home/runner/.cargo
          mkdir -p /home/runner/.cache

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.4
        with:
          version: "v0.8.2"

      - name: Get the release version from the Cargo.toml
        shell: bash
        run: echo "VERSION=$(grep -E "^version = " Cargo.toml |cut -f 3 -d" "|tr -d '"')" >> $GITHUB_ENV

      - name: Rust cache rustup
        uses: actions/cache@v4
        with:
          path: |
            /home/runner/.rustup
            /home/runner/.cargo
          key: ${{ matrix.os }}-dict-to-mozc-${{ matrix.target }}-${{ env.VERSION }}
          restore-keys: ${{ matrix.os }}-dict-to-mozc-${{ matrix.target }}-

      - name: Install stable toolchain
        shell: bash
        run: |
          which rustup && rustup update || curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y || rustup update
          echo "Running Rust program for ${{ matrix.os }}"
          curl -Lo mold.tar.gz https://github.com/rui314/mold/releases/download/v2.34.1/mold-2.34.1-x86_64-linux.tar.gz
          sudo tar -xf mold.tar.gz --strip-component=1 -C /usr/local/

      - name: Cross build with all features
        run: |
          which rustc
          source $HOME/.cargo/env || $PATH=$HOME/.cargo/bin:$PATH
          which rustc
          if [[ ${{ matrix.target }} =~ apple ]];then
            docker run \
              --volume "${PWD}":/root/src \
              --workdir /root/src \
              --name rust-builder \
              -d joseluisq/rust-linux-darwin-builder:1.82.0 \
              sleep infinity
            docker exec rust-builder rm /root/.cargo/config -f
            docker cp config.toml rust-builder:/root/.cargo/config.toml
            docker exec rust-builder sh -c "cargo build --release --target ${{ matrix.target }}"
            docker exec rust-builder ${{ matrix.target }}22.4-strip -v target/${{ matrix.target }}/release/dict-to-mozc
            docker stop rust-builder
            docker rm rust-builder
            sudo chown $USER:$USER -R ${PWD}/*
          else
            rm $HOME/.cargo/config* -f
            cargo install cross
            cp config.toml $HOME/.cargo/ -f
            cp Cross.toml $HOME/.cargo/ -f
            cross build --release --target ${{ matrix.target }} --all-features --verbose --manifest-path ./Cargo.toml
          fi

      - name: Build archive
        shell: bash
        run: |
          binary_name="dict-to-mozc"

          dirname="$binary_name-${{ matrix.target }}"
          mkdir "$dirname"
          if [ "${{ matrix.target }}" == "x86_64-pc-windows-gnu" ]; then
            mv "target/${{ matrix.target }}/release/$binary_name.exe" "$dirname"
          else
            mv "target/${{ matrix.target }}/release/$binary_name" "$dirname"
          fi

          if [ "${{ matrix.target }}" == "x86_64-pc-windows-gnu" ]; then
            7z a "$dirname.zip" "$dirname"
            7z l "$dirname.zip"
            echo "ASSET=$dirname.zip" >> $GITHUB_ENV
          else
            tar -czf "$dirname.tar.gz" "$dirname"
            tar tvf "$dirname.tar.gz"
            echo "ASSET=$dirname.tar.gz" >> $GITHUB_ENV
          fi

      - name: Upload binaries to release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ env.ASSET }}
